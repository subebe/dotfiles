# ColorScheme
[[plugins]]
repo ='w0ng/vim-hybrid'

# Basic
[[plugins]]
repo ='vim-jp/vimdoc-ja'
[[plugins]]
repo = 'Shougo/vimproc'
hook_add = '''
  let g:vimproc#download_windows_dll = 1
'''
[[plugins]]
repo = 'thinca/vim-singleton'
if = 'has("clientserver")'
hook_source = '''
  call singleton#enable()
'''
[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

# Completion
[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_auto_delimiter = 1
'''
[[plugins]]
repo = 'Shougo/neosnippet'
on_source = 'neocomplete.vim'
hook_add = '''
  let g:neosnippet#enable_conceal_markers=0
  imap <expr><Tab> neosnippet#expandable_or_jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<Tab>"
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet'

# Util
[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'unite.vim'
hook_add = '''
  nnoremap <Leader>u :<C-u>Denite buffer<CR>
  nnoremap <Leader>U :<C-u>Denite file_mru<CR>
  nnoremap <Leader>p :<C-u>DeniteProjectDir file/rec<CR>
'''
hook_source = '''
  call denite#custom#option('_', 'highlight_mode_insert', 'Search')
'''


[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'unite.vim'
hook_post_source = '''
  let g:neomru#file_mru_ignore_pattern .= '\|\%(^\%(gina\)://\)'
'''
[[plugins]]
repo = 'Shougo/vimfiler'
on_path = '.*'
hook_add = '''
  augroup MyAugroup
    autocmd FileType vimfiler nnoremap <silent><buffer><expr> <C-t> vimfiler#do_action('tabopen')
  augroup END

  nnoremap <Leader><Leader> :<C-u>VimFilerBufferDir -explorer -force-quit<CR>
  nnoremap <Leader>f :<C-u>VimFilerBufferDir -explorer -no-force-quit<CR>
  let g:vimfiler_as_default_explorer = 1
'''
hook_post_source = '''
  call vimfiler#custom#profile("default", "context", {"safe": 0, "auto_cd": 1})
'''
[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
[[plugins]]
repo = 'chrisbra/Recover.vim'
on_event = 'SwapExists'

# Quickfix
[[plugins]]
repo = 'cohama/vim-hier'
on_event = 'QuickFixCmdPre'
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
## quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = '<Plug>'
hook_add = '''
  nmap <Leader>r <Plug>(quickrun)
'''
hook_post_source = '''
  if !exists("g:quickrun_config") | let g:quickrun_config = {} | endif
  let g:quickrun_config["_"] = {"runner" : "vimproc", "runner/vimproc/updatetime" : 60}
'''
[[plugins]]
repo = 'w0rp/ale'
on_cmd = 'ALEEnable'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_fix_on_save = 1

  if !exists("g:ale_linters") | let g:ale_linters = {} | endif
  let g:ale_linters['php'] = ['php']
  let g:ale_php_phpcs_standard = " %s"
  let g:ale_echo_msg_format = "%linter%: %s"

  if !exists("g:ale_fixers") | let g:ale_fixers = {} | endif
  let g:ale_fixers['javascript'] = ['prettier']
'''

# Edit
[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_add = '''
  imap <C-h> <BS>
  cmap <C-h> <BS>
'''
[[plugins]]
repo = 'tpope/vim-surround'
on_map = [
  ['n', '<Plug>Dsurround', '<Plug>Csurround', '<Plug>CSurround', '<Plug>Ysurround', '<Plug>YSurround', '<Plug>Yssurround', '<Plug>YSsurround'],
  ['x', '<Plug>VSurround', '<Plug>VgSurround'],
]
hook_add = '''
  nmap ds  <Plug>Dsurround
  nmap cs  <Plug>Csurround
  nmap cS  <Plug>CSurround
  nmap ys  <Plug>Ysurround
  nmap yS  <Plug>YSurround
  nmap yss <Plug>Yssurround
  nmap ySs <Plug>YSsurround
  nmap ySS <Plug>YSsurround
  xmap S   <Plug>VSurround
  xmap gS  <Plug>VgSurround
''' 
[[plugins]]
repo = 'tpope/vim-repeat'
on_source = ['vim-surround', 'caw.vim']
[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
'''
[[plugins]]
repo = 'kana/vim-operator-user'
lazy = 1
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
  map _ <Plug>(operator-replace)
'''
[[plugins]]
repo ='junegunn/vim-easy-align'
on_map = [
  ['v', '<Plug>(EasyAlign)'],
]
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
'''
# [plugins]
# repo = 'matchit.zip'
# lazy = 1
# [[plugins]]
# repo = 'vimtaku/hl_matchit.vim'
# depends = 'matchit.zip'
[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>'
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
'''
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  map <Leader>s <Plug>(easymotion-prefix)

  nmap s <Plug>(easymotion-overwin-f2)
  xmap s <Plug>(easymotion-bd-f2)
  omap s <Plug>(easymotion-bd-f2)
  nmap <Leader>sf <Plug>(easymotion-overwin-f)
  xmap <Leader>sf <Plug>(easymotion-bd-f)
  omap <Leader>sf <Plug>(easymotion-bd-f)
  nmap <Leader>sL <Plug>(easymotion-overwin-line)
  xmap <Leader>sL <Plug>(easymotion-bd-jk)
  omap <Leader>sL <Plug>(easymotion-bd-jk)
  nmap <Leader>sw <Plug>(easymotion-overwin-w)
  xmap <Leader>sw <Plug>(easymotion-bd-w)
  omap <Leader>sw <Plug>(easymotion-bd-w)
'''
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php']
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
'''

# FileType
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-'
hook_add = '''
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

# VCS
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_post_source = '''
  call gina#custom#command#option('status', '-b|--branch')
  call gina#custom#command#option('status', '-s|--short')
  call gina#custom#command#option('commit', '-v|--verbose')
  call gina#custom#command#option('log', '--graph')
  call gina#custom#action#alias('branch', 'merge:no-ff', 'commit:merge:no-ff')

  call gina#custom#mapping#nmap(
      \ 'branch', 'D',
      \ ':<C-u>call gina#action#call("branch:delete")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'branch', 'N',
      \ ':<C-u>call gina#action#call("branch:new")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'branch', 'R',
      \ ':<C-u>call gina#action#call("branch:move")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'status', 'dp',
      \ ':<C-u>call gina#action#call("diff:preview")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'status', '<C-^>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'commit', '<C-^>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'log', '<C-l>',
      \ ':<C-u>Gina log<CR><C-l>',
      \ {'noremap': 1, 'silent': 1},
      \)

  let g:mytabline_right = '%{gina#component#repo#preset()}'
'''
hook_add = '''
  nnoremap <Leader>gs :<C-u>Gina status --opener=split<CR>
  nnoremap <Leader>gS :<C-u>Gina status --opener=tabedit<CR>
  nnoremap <Leader>gc :<C-u>Gina commit --opener=vsplit<CR>
  nnoremap <Leader>gC :<C-u>Gina commit --amend --opener=vsplit<CR>
  nnoremap <Leader>gb :<C-u>Gina branch --all --opener=split<CR>
  nnoremap <Leader>gl :<C-u>Gina log --opener=vsplit<CR>
  nnoremap <Leader>gL :execute 'Gina log --opener=vsplit -- '.expand('%:p')<CR>
  nnoremap <Leader>gn :<C-u>Gina log --name-status --opener=vsplit<CR>
  nnoremap <Leader>gN :execute 'Gina log --name-status --opener=vsplit -- '.getcwd()<CR>
'''
