# ColorScheme
[[plugins]]
repo ='w0ng/vim-hybrid'

# Basic
[[plugins]]
repo ='vim-jp/vimdoc-ja'
[[plugins]]
repo = 'thinca/vim-singleton'
if = 'has("clientserver")'
hook_source = '''
  call singleton#enable()
'''
[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = 'Vitalize'

# Completion
[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_auto_delimiter = 1
'''
[[plugins]]
repo = 'Shougo/neosnippet'
on_source = 'neocomplete.vim'
hook_add = '''
  let g:neosnippet#enable_conceal_markers=0
  imap <expr><Tab> neosnippet#expandable_or_jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<Tab>"
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet'

# Util
[[plugins]]
repo = 'roxma/nvim-yarp'
hook_add = '''
  let g:python3_host_prog = 'python'
'''
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
[[plugins]]
repo = 'Shougo/denite.nvim'
# depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
# on_cmd = 'Denite'
hook_add = '''
  nnoremap <Leader>u :<C-u>Denite buffer<CR>
  nnoremap <Leader>U :<C-u>Denite file_mru<CR>
  nnoremap <Leader>p :<C-u>DeniteProjectDir file/rec<CR>
  nnoremap <Leader>P :<C-u>execute 'DeniteProjectDir' '-input='.expand('<cword>') 'file/rec'<CR>

  augroup MyAugroup
    autocmd FileType denite call s:denite_settings()
  augroup END
  function! s:denite_settings() abort
    nnoremap <silent><buffer><nowait><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><nowait><expr> t denite#do_map('do_action', 'tabopen')

    nnoremap <silent><buffer><nowait><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><nowait><expr> * denite#do_map('toggle_select')

    nnoremap <silent><buffer><nowait><expr> <ESC> denite#do_map('quit')
    nnoremap <silent><buffer><nowait><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><nowait><expr> k line('.') == 1 ? 'G' : 'k'
  endfunction
'''
# hook_post_source = '''
# '''
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
hook_post_source = '''
  let g:neomru#file_mru_ignore_pattern .= '\|\%(^\%(gina\)://\)'
'''
[[plugins]]
repo = 'Shougo/defx.nvim'
# depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
# on_cmd = 'Defx'
hook_add = '''
  nnoremap <Leader><Leader> :<C-u>Defx -buffer-name=tree<CR>

  call defx#custom#option('_', {
      \ 'root_marker': ':',
      \ 'show_ignored_files': 1,
      \ 'auto_cd': 1,
      \ })
  call defx#custom#option('tree', {
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'winwidth': 40,
      \ 'toggle': 1,
      \ 'columns': 'mark:indent:icon:filename',
      \ })
  call defx#custom#option('temp', {
      \ 'split': 'horizontal',
      \ 'toggle': 1,
      \ 'columns': 'mark:indent:icon:filename',
      \ })
  call defx#custom#column('filename', {
      \ 'min_width': 38,
      \ 'max_width': 38,
      \ })
  augroup MyAugroup
    autocmd FileType defx call s:defx_settings()
  augroup END
  function! s:defx_settings() abort
    nnoremap <silent><buffer><nowait><expr> <CR> defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('multi', ['drop', 'quit'])
    nnoremap <silent><buffer><nowait><expr> t defx#do_action('open', 'tab split')
    nnoremap <silent><buffer><nowait><expr> s defx#do_action('open', 'split')
    nnoremap <silent><buffer><nowait><expr> v defx#do_action('open', 'vsplit')

    nnoremap <silent><buffer><nowait><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><nowait><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><nowait><expr> yy defx#do_action('yank_path')

    nnoremap <silent><buffer><nowait><expr> - defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><nowait><expr> + defx#do_action('open_directory')
    nnoremap <silent><buffer><nowait><expr> \ defx#do_action('cd', ['/'])
    nnoremap <silent><buffer><nowait><expr> ~ defx#do_action('cd')

    nnoremap <silent><buffer><nowait><expr> * defx#do_action('toggle_select')
    xnoremap <silent><buffer><nowait><expr> * defx#do_action('toggle_select_visual')
    nnoremap <silent><buffer><nowait><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><nowait><expr> m defx#do_action('move')
    nnoremap <silent><buffer><nowait><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><nowait><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><nowait><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><nowait><expr> % defx#do_action('new_multiple_files')

    nnoremap <silent><buffer><nowait><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><nowait><expr> <ESC> defx#do_action('quit')
    nnoremap <silent><buffer><nowait><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><nowait><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><nowait> <Tab> :<C-u>Defx -buffer-name=temp<CR>
  endfunction
'''
# hook_post_source = '''
# '''
[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

# Quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

# Edit
[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_add = '''
  imap <C-h> <BS>
  cmap <C-h> <BS>
'''
[[plugins]]
repo = 'machakann/vim-sandwich'
# on_map = '<Plug>'
hook_add = '''
  runtime macros/sandwich/keymap/surround.vim
'''
[[plugins]]
repo = 'kana/vim-repeat'
on_source = ['vim-sandwich', 'caw.vim']
hook_post_source = '''
if hasmapto('<Plug>(operator-sandwich-dot)')
  nmap . <Plug>(operator-sandwich-predot)<Plug>(repeat-.)
endif
'''
[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
'''
[[plugins]]
repo = 'kana/vim-operator-user'
lazy = 1
[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
  map _ <Plug>(operator-replace)
'''
[[plugins]]
repo ='junegunn/vim-easy-align'
on_map = [
  ['v', '<Plug>(EasyAlign)'],
]
hook_add = '''
  vmap <Enter> <Plug>(EasyAlign)
'''
# [plugins]
# repo = 'matchit.zip'
# lazy = 1
# [[plugins]]
# repo = 'vimtaku/hl_matchit.vim'
# depends = 'matchit.zip'
[[plugins]]
repo = 'tyru/caw.vim'
on_map = '<Plug>'
hook_add = '''
  nmap gc <Plug>(caw:prefix)
  xmap gc <Plug>(caw:prefix)
'''
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php']
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>'
hook_add = '''
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
'''

# FileType
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser-'
hook_add = '''
  let g:netrw_nogx = 1
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

# VCS
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_post_source = '''
  call gina#custom#command#option('status', '-b|--branch')
  call gina#custom#command#option('status', '-s|--short')
  call gina#custom#command#option('commit', '-v|--verbose')
  call gina#custom#command#option('log', '--graph')
  call gina#custom#action#alias('branch', 'merge:no-ff', 'commit:merge:no-ff')

  call gina#custom#mapping#nmap(
      \ 'branch', 'D',
      \ ':<C-u>call gina#action#call("branch:delete")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'branch', 'N',
      \ ':<C-u>call gina#action#call("branch:new")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'branch', 'R',
      \ ':<C-u>call gina#action#call("branch:move")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'status', 'dp',
      \ ':<C-u>call gina#action#call("diff:preview")<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'status', '<C-^>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'commit', '<C-^>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
  call gina#custom#mapping#nmap(
      \ 'log', '<C-l>',
      \ ':<C-u>Gina log<CR><C-l>',
      \ {'noremap': 1, 'silent': 1},
      \)

  let g:mytabline_right = '%{gina#component#repo#preset()}'
'''
hook_add = '''
  nnoremap <Leader>gs :<C-u>Gina status --opener=split<CR>
  nnoremap <Leader>gS :<C-u>Gina status --opener=tabedit<CR>
  nnoremap <Leader>gc :<C-u>Gina commit --opener=vsplit<CR>
  nnoremap <Leader>gC :<C-u>Gina commit --amend --opener=vsplit<CR>
  nnoremap <Leader>gb :<C-u>Gina branch --all --opener=split<CR>
  nnoremap <Leader>gl :<C-u>Gina log --opener=vsplit<CR>
  nnoremap <Leader>gL :execute 'Gina log --opener=vsplit -- '.expand('%:p')<CR>
  nnoremap <Leader>gn :<C-u>Gina log --name-status --opener=vsplit<CR>
  nnoremap <Leader>gN :execute 'Gina log --name-status --opener=vsplit -- '.getcwd()<CR>
'''
