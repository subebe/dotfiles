set encoding=utf-8
scriptencoding utf-8

function! IsWindows()
    return has('win16') || has('win32') || has('win64')
endfunction

function! IsMac()
    return has('mac')
endfunction

"vimファイルディレクトリ
if IsWindows()
  let $VIMFILES='~/vimfiles'
else
  let $VIMFILES='~/.vim'
endif

"プラグイン
if has('vim_starting')
  if &compatible
    " Be iMproved
    set nocompatible
  endif
  set runtimepath+=$VIMFILES/bundle/neobundle.vim/
endif
call neobundle#begin(expand($VIMFILES.'/bundle/'))
"NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

"filer
NeoBundle 'Shougo/vimfiler'

"unite
NeoBundle 'Shougo/unite.vim'
"unite最近開いたファイル
NeoBundle 'Shougo/neomru.vim'

"入力補完
NeoBundle 'Shougo/neocomplcache'

"囲み文字操作
NeoBundle 'tpope/vim-surround'

"再起動プラグイン
NeoBundle 'tyru/restart.vim'

" テキストオブジェクトで置換
NeoBundle 'kana/vim-operator-replace'
NeoBundle 'kana/vim-operator-user'

"plugin repeat
NeoBundle 'tpope/vim-repeat'

"vim-singleton
if IsWindows()
  NeoBundle 'thinca/vim-singleton'
endif

"f,t操作変更
NeoBundle 'rhysd/clever-f.vim'

"検索位置表示
NeoBundle 'osyo-manga/vim-anzu'

"スタート画面
NeoBundle 'mhinz/vim-startify'

"括弧、タグ対応
NeoBundle 'matchit.zip'
NeoBundle 'vimtaku/hl_matchit.vim.git'

"git操作
NeoBundle 'tpope/vim-fugitive'

"git確認
NeoBundle 'cohama/agit.vim'

"検索
NeoBundle 'haya14busa/incsearch.vim'

"emmet
"http://motw.mods.jp/Vim/emmet-vim.html
NeoBundle 'mattn/emmet-vim'

"日本語ヘルプ
NeoBundle 'vim-jp/vimdoc-ja'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck

"neocomplcache
let g:neocomplcache_temporary_dir=expand($VIMFILES.'/cache/neocomplcache')
"開始時に起動する
let g:neocomplcache_enable_at_startup=1
let g:neocomplcache_enable_smart_case=1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3


"unite
call unite#custom#default_action('directory', 'vimfiler')
"neomru
let g:neomru#directory_mru_path=expand($VIMFILES.'/cache/neomru/directory')
let g:neomru#file_mru_path=expand($VIMFILES.'/cache/neomru/file')


"vimfiler
let g:vimfiler_data_directory=expand($VIMFILES.'/cache/vimfiler')
let g:vimfiler_enable_auto_cd=1
let g:vimfiler_as_default_explorer=1


"vim-operator-replace
map _ <Plug>(operator-replace)


"vim-repeat
"下にも適用
nmap <M-.> j.


"restart
let g:restart_sessionoptions='blank,buffers,curdir,folds,help,localoptions,tabpages'


"vim-singleton
if IsWindows()
  call singleton#enable()
endif


"clever-f & vim-anzu
nmap <silent> <ESC><ESC> <Plug>(anzu-clear-search-status)<Plug>(clever-f-reset):nohlsearch<CR>

"vim-startify
let g:startify_custom_indices = ['f', 'd', 'g', 'h', 'l', 'a', 'r', 'u', 'y', 'w', 'o', 'm', 'n', 'c', 'x', 'z']
let g:startify_bookmarks = [$MYVIMRC]

"hl_matchit.vim
let g:hl_matchit_enable_on_vim_startup = 1
let g:hl_matchit_hl_groupname = 'MatchParen'
let g:hl_matchit_allow_ft = 'html,vim'
let g:hl_matchit_hl_priority = 10
let g:hl_matchit_speed_level = 2

"incsearch
let g:incsearch#auto_nohlsearch = 1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
"map n  <Plug>(incsearch-nohl-n)
"map N  <Plug>(incsearch-nohl-N)
"map *  <Plug>(incsearch-nohl-*)
"map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"vim-anzu
nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n)
nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N)
nmap * <Plug>(incsearch-nohl)<Plug>(anzu-star)
nmap # <Plug>(incsearch-nohl)<Plug>(anzu-sharp)





"#表示関係
"コマンドラインに候補を表示
set wildmenu
"ステータスライン
"検索位置を表示する時のみ[]で囲う
function! GetAnzuSearchStatus()
    if anzu#search_status() != ''
        return '[ '.anzu#search_status().' ]'
    endif
    return ''
endfunction
set statusline=%F "フルパス
set statusline+=%m "修正フラグ
set statusline+=%r "読み取り専用フラグ
set statusline+=\ 
set statusline+=%{GetAnzuSearchStatus()} "検索位置
set statusline+=
set statusline+=%= "右寄せ
set statusline+=\|\ 
set statusline+=%{&fileformat},%{&fileencoding} "改行文字,文字コード
set statusline+=\ \|\ 
set statusline+=%Y "filetype
set statusline+=\ \|\ 
set statusline+=%l,%c(%p%%) "カーソル位置
set statusline+=\ 

set laststatus=2
"タブを常に表示
set showtabline=2
"行番号表示
set number
"タイトルバーをファイル名に
set title
"256色
set t_Co=256
"windows環境でパス区切りにスラッシュを使用
set shellslash

"ルーラ表示
set ruler
"折り返し
set wrap
set display=lastline
"行頭行末の左右移動で行をまたぐ
set whichwrap=b,s,h,l,<,>,~,[,]
"スクロールのオフセット設定
set scrolloff=10
"左右スクロールのオフセット
set sidescrolloff=16
"左右スクロール距離
set sidescroll=1
"全角記号幅設定
set ambiwidth=double

"#検索関係
set hlsearch
"検索時に大文字・小文字を区別しない。
set ignorecase
"大文字が含まれる場合は区別する
set smartcase
"逐次検索
set incsearch
"#タブ、インデント設定
set expandtab "softtab
set autoindent
set smartindent
set tabstop=4 "tab width
set shiftwidth=2 "auto indent width
set softtabstop=2 "tabkey space

"#ハイライト
"シンタックスハイライト
syntax on
"カラーテーマ
colorscheme hybrid
"カーソル行のハイライト
set cursorline

"不可視文字
if has('conceal')
    "空白表示
    augroup viewable
        autocmd!
        autocmd BufNew,BufEnter * syntax match Ignore / / containedin=ALL conceal cchar=･
        autocmd BufNew,BufEnter * syntax match Ignore /　/ containedin=ALL conceal cchar=□
    augroup END
    set list
    set listchars=tab:￫\ ,eol:⏎
    set conceallevel=2
    set concealcursor=nc
endif


"カレントディレクトリの設定
"起動時ホームへ移動
cd ~
"カレントディレクトリ移動
augroup set_crr
  autocmd!
  autocmd BufEnter * execute ':lcd ' . expand('%:p:h')
augroup END


"インクリメント、デクリメントを10進のみにする
set nrformats=hex
"viminfoファイルのパスを変更
execute 'set viminfo+=n'.expand($VIMFILES.'/viminfo')
"バックアップファイル設定
set backup
execute 'set backupdir='.expand($VIMFILES.'/backup')
"スワップファイル設定
set swapfile
execute 'set directory='.expand($VIMFILES.'/swap')
"アンドゥファイル設定
execute 'set undodir='.expand($VIMFILES.'/undo')
"BSで削除許可
set backspace=indent,eol,start
"マウス使用
set mouse=a
"OSのクリップボード使用
set clipboard+=unnamed

"textwidthでの自動改行off
set formatoptions-=t

"インサートモードを抜けるときにIMEをオフに
"inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>

"折り返し移動入れ替え
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

"ノーマルモードでの改行
nnoremap <Space>j o<ESC>
nnoremap <Space>k O<ESC>
"行末、先頭移動
noremap <Space>h ^
noremap <Space>l $

"行末までヤンク
nnoremap Y y$
"全ヤンク、デリート
nnoremap <silent> <M-y> :%yank<CR>
nnoremap <silent> <M-d> :%delete<CR>

"行結合入れ替え
nnoremap J gJ
nnoremap gJ J

"インサートモードでの移動
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>

"ウィンドウサイズ調整
nnoremap <silent> <S-Left> :wincmd <<CR>
nnoremap <silent> <S-Right> :wincmd ><CR>
nnoremap <silent> <S-Up> :wincmd +<CR>
nnoremap <silent> <S-Down> :wincmd -<CR>

"ウィンドウ移動
nnoremap <C-Left> <C-w>h
nnoremap <C-Right> <C-w>l
nnoremap <C-Up> <C-w>k
nnoremap <C-Down> <C-w>j

"タブ移動
nnoremap gl gt
nnoremap gh gT

"上書き
nnoremap <silent> <C-s> :w<CR>
inoremap <silent> <C-s> <ESC>:w<CR>

"画面移動
nnoremap <Tab> <C-w><C-w>

"vimrcの編集
nnoremap <silent> <F1> :e $MYVIMRC<CR>
nnoremap <silent> <S-F1> :tabedit $MYVIMRC<CR>
nnoremap <silent> <F2> :e $MYGVIMRC<CR>
nnoremap <silent> <S-F2> :tabedit $MYGVIMRC<CR>
"ファイラ開く
noremap <silent> <F3> :VimFilerExplorer -project<CR>

"Qでバッファ削除
nnoremap <silent> Q :bdelete<CR>

"C-v貼り付けモード
command! PastModeOn nnoremap <lt>C-v> p
command! PastModeOff nunmap <lt>C-v>

"x削除はクリップボードに入れない
nnoremap x "_x
nnoremap X "_X


"CUI用
if !has('gui_running')
  runtime 'cui.vim'
endif
